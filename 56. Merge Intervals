Problem:

Given a collection of intervals, merge all overlapping intervals.

For example, Given [1,3],[2,6],[8,10],[15,18], return [1,6],[8,10],[15,18].

Solutions:

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
 
class Solution {
    public int[][] merge(int[][] intervals) {
        
        if(intervals.length<=1) return intervals;
        
        List<int[]> mergedIntervals = new ArrayList<>();
        
        Arrays.sort(intervals, (arr1, arr2) -> Integer.compare(arr1[0], arr2[0]));
        
        int[] currentInterval = intervals[0];
        
        mergedIntervals.add(currentInterval);
        
        for(int[] interval: intervals){
            int currentStart = currentInterval[0];
            int currentEnd = currentInterval[1];
            int newStart = interval[0];
            int newEnd = interval[1];
            
            if(currentEnd>=newStart){
                currentInterval[1] = Math.max(currentEnd, newEnd);
            }else{
                currentInterval = interval;
                mergedIntervals.add(currentInterval);
            }
            
        }
        
        
        return mergedIntervals.toArray(new int[mergedIntervals.size()][]);
    }
}
